%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% linear serre equations in 2D by approximating nonlinear terms to 0 
%%%%% Governing equations 
%%%%% ht + (hu)x + (hv)y = 0     , (hu)x = d^2(hu)/dx^2 = u*dh/dx + h*du/dx;
%%%%% ut + uux + vuy + g * ex - 1/3 H^2 (uxxt + vxyt) = 0
%%%%% vt + uvx + vvy + g * ey - 1/3 H^2 (uxyt + vyyt) = 0

%%%%% h : total depth ( H + e)
%%%%% H : mean depth
%%%%% e : elevation of wave
%%%%% g : gravitational acceleration
%%%%% u : horizontal velocity
%%%%% v : vertical velocity

%%%%% implementation by finite diffence method , ADI method
%%%%% Please anybody help me fixing error and give me any comments on it

clc;
clear all;
% define the grid size
n = 50;
dt = 0.01;
dx = 1;
dy = 1;
g = 9.8;

H = ones(n+2,n+2); % displacement matrix (this is what gets drawn)
U = zeros(n+2,n+2); % x velocity
V = zeros(n+2,n+2); % y velocity
% draw the mesh
grid = surf(H);
axis([1 n 1 n 1 3]);
hold all;
% create initial displacement
[x,y] = meshgrid( linspace(-3,3,10) );
R = sqrt(x.^2 + y.^2) + eps;
% R = 0.1* sech(x - y)^2 ;
  
Z = (sin(R)./R);
Z = max(Z,0);
% add displacement to the height matrix
w = size(Z,1);
i = 10:w+9;
j = 20:w+19;
H(i,j) = H(i,j) + Z;
% empty matrix for half-step calculations
Hx = zeros(n+2,n+2);
Hy = zeros(n+2,n+2);
Ux = zeros(n+2,n+2);  Ux1 = zeros(n+2,n+2);
Uy = zeros(n+2,n+2);  Uy1 = zeros(n+2,n+2);
Vx = zeros(n+2,n+2);  Vx1 = zeros(n+2,n+2);
Vy = zeros(n+2,n+2);  Vy1 = zeros(n+2,n+2);
Vyy = zeros(n+2,n+2);
 k=1;
 while 1==1
 % redraw the mesh
 set(grid, 'zdata', H);
 zlim([-1,3])
 drawnow
 % blending the edges keeps the function stable
 H(:,1) = H(:,2);
 H(:,n+2) = H(:,n+1);
 H(1,:) = H(2,:);
 H(n+2,:) = H(n+1,:);

 % reverse direction at the x edges
 U(1,:) = -U(2,:);
 U(n+2,:) = -U(n+1,:);

 % reverse direction at the y edges
 V(:,1) = -V(:,2);
 V(:,n+2) = -V(:,n+1);


 % First half step
 i = 1:n+1;
 j = 1:n+1;

 % height
 Hx(i,j) = (H(i+1,j+1)+H(i,j+1))/2 - dt/(2*dx)* H(i,j+1) .*(U(i+1,j+1)-U(i,j+1)) -dt/(2*dx) *U(i,j+1) .*(H(i+1,j+1)-H(i,j+1));
 Hy(i,j) = (H(i+1,j+1)+H(i+1,j))/2 - dt/(2*dy)* H(i+1,j) .*(V(i+1,j+1)-V(i+1,j)) -dt/(2*dy) *V(i+1,j) .*(H(i+1,j+1)-H(i+1,j));
 
 Ux1 = Ux ;
 Uy1 = Uy ;
 Vx1 = Vx ;
 Vy1 = Vy ;

 for j = 1:n+1
    for i = 1 : n+1

aa1(1:n+1) = -(2/3)*(dt*dx^2);
aa2(1:n+2) =  (4/3)/(dt*dx^2) + 2/dt;
aa3(1:n+1) = -(2/3)*(dt*dx^2);

a1 = diag(aa1,1);
a2 = diag(aa2,0);
a3 = diag(aa3,-1);

aa111(1:n)  = (1/3)/(dt*dx^2);
aa11(1:n+1) = 1/dt -U(i,j+1)/(2*dx) - 1/(3*dt*dx^2) ;
aa22(1:n+2) = 1/dt-(1/3)/(dt*dx^2);
aa33(1:n+1) = U(i,j+1)/(2*dx) + 1/(3*dt*dx^2) ;

a111 = diag(aa111,2);
a11 = diag(aa11,1);
a22 = diag(aa22,0);
a33 = diag(aa33,-1);

aac1(1:n+1) = -g/(2*dx) ;
aac2(1:n+2) =  0;
aac3(1:n+1) =  g/(2*dx) ;

ac1 = diag(aac1,1);
ac2 = diag(aac2,0);
ac3 = diag(aac3,-1);

M1 = a1 + a2 + a3;
M2 = a111 + a11 + a22 + a33;
M3 = ac1 + ac2 + ac3;

    end
    Ux(:,j) = M1 \ M2*U(:,j+1) + M1 \ M3 * H(:,j+1);
 end
 Ux(:,n+2) = Ux(:,n+1);
 Ux(n+2,:) = Ux(n+1,:);
 
 V2 = V' ;
 H2 = H' ;
for j = 1:n+1
    for i = 1 : n+1

aab1(1:n+1) = -(2/3)*(dt*dy^2);
aab2(1:n+2) =  (4/3)/(dt*dy^2) + 2/dt;
aab3(1:n+1) = -(2/3)*(dt*dy^2);

ab1 = diag(aab1,1);
ab2 = diag(aab2,0);
ab3 = diag(aab3,-1);

aab111(1:n)  = (1/3)/(dt*dy^2);
aab11(1:n+1) = 1/dt -V(i+1,j)/(2*dy) - 1/(3*dt*dy^2) ;
aab22(1:n+2) = 1/dt -(1/3)/(dt*dy^2);
aab33(1:n+1) = V(i+1,j)/(2*dy) + 1/(3*dt*dy^2) ;

ab111 = diag(aab111,2);
ab11 = diag(aab11,1);
ab22 = diag(aab22,0);
ab33 = diag(aab33,-1);

aac11(1:n+1) = -g/(2*dy) ;
aac22(1:n+2) =  0;
aac33(1:n+1) =  g/(2*dy) ;

ac11 = diag(aac11,1);
ac22 = diag(aac22,0);
ac33 = diag(aac33,-1);

N1 = ab1 + ab2 + ab3;
N2 = ab111 + ab11 + ab22 + ab33;
N3 = ac11 + ac22 + ac33;
    end
 
    Vyy(:,j) = N1 \ N2 * V2(:,j+1) + N1 \ N3 * H2(:,j+1);
end
  Vy = Vyy' ;
   Vy(:,n+2) = Vy(:,n+1);
   Vy(n+2,:) = Vy(n+1,:);
 
 i = 1:n;
 j = 1:n;
 
 Uy(i,j) = 1/(3*dx*dy) * (Vy(i+1,j+1) - Vy(i+1,j) -Vy(i,j+1) +Vy(i,j)) + ...
     (U(i+1,j+1) + U(i+1,j))/2 - dt/(2*dy)*V(i+1,j) .* (U(i+1,j+1) - U(i+1,j)) -...
     1/(6*dx*dy) * (V(i+2,j+2) -V(i+2,j+1) -V(i+1,j+2) +V(i+1,j+1) +V(i+2,j+1) -V(i+2,j) -V(i+1,j+1) +V(i+1,j));
 Uy(:,n+2) = Uy(:,n+1);
 Uy(n+2,:) = Uy(n+1,:);
 
 Vx(i,j) = 1/(3*dx*dy) * (Ux(i+1,j+1) - Ux(i,j+1) -Ux(i+1,j) +Ux(i,j)) + ...
     (V(i+1,j+1) + V(i,j+1))/2 - dt/(2*dx)*U(i,j+1) .* (V(i+1,j+1) - V(i,j+1)) -...
     1/(6*dx*dy) * (U(i+2,j+2) -U(i+1,j+2) -U(i+2,j+1) +U(i+1,j+1) +U(i+1,j+2) -U(i,j+2) -U(i+1,j+1) +U(i,j+1));
 Vx(:,n+2) = Vx(:,n+1);    
 Vx(n+2,:) = Vx(n+1,:);
 
 %--------------------------------------------------------------------------------------------------------
 %--------------------------------------------------------------------------------------------------------
 
 % Second half step
 i = 2:n+1;
 j = 2:n+1;

 % height
 H(i,j) = H(i,j) - (dt/dx) *( Hx(i-1,j-1).*(Ux(i,j-1)-Ux(i-1,j-1)) + Ux(i-1,j-1).*(Hx(i,j-1)-Hx(i-1,j-1)) ) -...
 (dt/dy)*( Hy(i-1,j-1) .*(Vy(i-1,j)-Vy(i-1,j-1)) + Vy(i-1,j-1) .*(Hy(i-1,j) - Hy(i-1,j-1)) );

 % x momentum
  i = 3:n+1;
  j = 3:n+1;
 
U(i,j) = U(i,j) - (dt/dx)*Ux(i-1,j-1) .*(Ux(i,j-1)-Ux(i-1,j-1)) - (dt/dy)*Vy(i-1,j-1).*(Uy(i-1,j)-Uy(i-1,j-1)) - (dt/dx)*g*(Hx(i,j-1)-Hx(i-1,j-1)) +...
     1/3* ( 1/(dx^2) * ( (Ux(i,j-1) -2*Ux(i-1,j-1) + Ux(i-2,j-1)) - Ux1(i,j-1) +2*Ux1(i-1,j-1) - Ux1(i-2,j-1)) +...
     1/(dx*dy) * ( Vy(i,j) -Vy(i,j-1) -Vy(i-1,j) +Vy(i-1,j-1) -Vy1(i,j) +Vy1(i,j-1) +Vy1(i-1,j) -Vy1(i-1,j-1))) ;

U(2,:) = U(3,:);
U(:,2) = U(:,3); 
 
 % y momentum
 V(i,j) = V(i,j) - (dt/dx)*Ux(i-1,j-1) .*(Vx(i,j-1)-Vx(i-1,j-1)) - (dt/dy)*Vy(i-1,j-1).*(Vy(i-1,j)-Vy(i-1,j-1)) - (dt/dy)*g*(Hy(i-1,j)-Hy(i-1,j-1)) +...
     1/3* ( 1/(dy^2) * ( (Vy(i-1,j) -2*Vy(i-1,j-1) + Vy(i-1,j-2)) - Vy1(i-1,j) +2*Vy1(i-1,j-1) - Vy1(i-1,j-2)) +...
     1/(dx*dy) * ( Ux(i,j) -Ux(i-1,j) -Ux(i,j-1) +Ux(i-1,j-1) -Ux1(i,j) +Ux1(i-1,j) +Ux1(i,j-1) -Ux1(i-1,j-1))) ;

 V(2,:) = V(3,:);
 V(:,2) = V(:,3);
 
 k=k+1
end
